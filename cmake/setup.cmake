include(CheckCXXCompilerFlag)
if (NOT DEFINED HINAPE_WARN_AS_ERROR)
    set(HINAPE_WARN_AS_ERROR ON)
endif ()
if (MSVC)
    set(HINAPE_WARNINGS /W4 /permissive- /utf-8 /Zc:__cplusplus)
    if (HINAPE_WARN_AS_ERROR)
        list(APPEND HINAPE_WARNINGS /WX)
    endif ()
    set(HINAPE_PRIVATE_DEFINES _CRT_SECURE_NO_WARNINGS)
    set(HINAPE_RELEASE_OPTS $<$<CONFIG:Release>:/O2 /Ot /Oi /fp:fast>)
else ()
    set(HINAPE_WARNINGS -Wall -Wextra -Wpedantic)
    if (HINAPE_WARN_AS_ERROR)
        list(APPEND HINAPE_WARNINGS -Werror)
    endif ()
    set(HINAPE_RELEASE_OPTS $<$<CONFIG:Release>:-O3 -ffast-math -fomit-frame-pointer>)
endif ()

option(HINAPE_SUPPRESS_MISLEADING_INDENTATION "Suppress -Wmisleading-indentation warning" ON)
if (HINAPE_SUPPRESS_MISLEADING_INDENTATION AND NOT MSVC)
    check_cxx_compiler_flag("-Wno-misleading-indentation" HINA_HAVE_NO_MISLEADING_INDENTATION)
    if (HINA_HAVE_NO_MISLEADING_INDENTATION)
        list(APPEND HINAPE_WARNINGS -Wno-misleading-indentation -Wno-error=misleading-indentation)
    endif ()
endif ()

set(HINAPE_PUBLIC_DEFINES "")
message(STATUS "HinaPE setup: warnings='${HINAPE_WARNINGS}'")
message(STATUS "HinaPE setup: release_opts='${HINAPE_RELEASE_OPTS}'")
message(STATUS "HinaPE setup: simd via Highway is configured separately if available")
message(STATUS "HinaPE setup: public_defines='${HINAPE_PUBLIC_DEFINES}' private_defines='${HINAPE_PRIVATE_DEFINES}'")
