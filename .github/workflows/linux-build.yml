name: linux-build

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]
  workflow_dispatch: {}

concurrency:
  group: linux-build-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        build_type: [Release, Debug]
    env:
      VULKAN_SDK_VERSION: latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install base deps
        run: |
          sudo apt-get update -y
          sudo apt-get install -y \
            build-essential git cmake ninja-build pkg-config \
            libx11-dev libxrandr-dev libxi-dev libxcursor-dev libxinerama-dev libxkbcommon-dev

      - name: Install Vulkan SDK
        uses: jakoch/install-vulkan-sdk-action@v1.2.5
        with:
          version: ${{ env.VULKAN_SDK_VERSION }}
          components: Vulkan-Headers,Vulkan-Loader,Glslang,SPIRV-Tools,SPIRV-Headers
          cache: true
          quiet: true

      - name: Verify Vulkan SDK tools
        run: |
          echo "VULKAN_SDK=$VULKAN_SDK"
          if [ -x "$VULKAN_SDK/bin/glslc" ]; then "$VULKAN_SDK/bin/glslc" --version; else echo 'glslc not found'; fi

      - name: Cache third-party downloads (_deps)
        uses: actions/cache@v4
        with:
          path: build/_deps
          key: deps-${{ runner.os }}-${{ matrix.build_type }}-${{ hashFiles('CMakeLists.txt','cmake/*.cmake') }}
          restore-keys: |
            deps-${{ runner.os }}-${{ matrix.build_type }}-
            deps-${{ runner.os }}-

      - name: Configure (${{ matrix.build_type }})
        run: |
          cmake -S . -B build -G Ninja \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
            -DHINAPE_BUILD_TESTS=ON \
            -DHINAPE_BUILD_EXAMPLES=ON \
            -DCMAKE_EXPORT_COMPILE_COMMANDS=ON

      - name: Build (${{ matrix.build_type }})
        run: |
          cmake --build build --config ${{ matrix.build_type }} --parallel

      - name: Run tests (${{ matrix.build_type }})
        env:
          CTEST_OUTPUT_ON_FAILURE: 1
        run: |
          # Ensure TBB runtime is found when running tests
          LIB_DIR=$(dirname $(find build -type f -name "libtbb*.so*" -print -quit) 2>/dev/null || echo "")
          if [ -n "$LIB_DIR" ]; then export LD_LIBRARY_PATH="$LIB_DIR:$LD_LIBRARY_PATH"; fi
          ctest --test-dir build -C ${{ matrix.build_type }} --output-on-failure

