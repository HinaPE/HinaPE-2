cmake_minimum_required(VERSION 3.26)
project(HinaPE LANGUAGES CXX)

option(HINAPE_WARN_AS_ERROR "Treat compiler warnings as errors" OFF)
option(HINAPE_WITH_CUDA "enable CUDA backend" ON)
option(HINAPE_WITH_VULKAN "enable Vulkan compute backend" ON)
option(HINAPE_WITH_TBB "enable TBB" ON)
option(HINAPE_WITH_AVX2 "enable AVX2" ON)

include(CheckCXXCompilerFlag)
function(hinape_apply_common_warnings target)
    if (MSVC)
        target_compile_options(${target} PRIVATE /W4 /permissive- /utf-8 /Zc:__cplusplus)
        if (HINAPE_WARN_AS_ERROR)
            target_compile_options(${target} PRIVATE /WX)
        endif ()
        target_compile_definitions(${target} PRIVATE _CRT_SECURE_NO_WARNINGS)
    else ()
        target_compile_options(${target} PRIVATE -Wall -Wextra -Wpedantic)
        if (HINAPE_WARN_AS_ERROR)
            target_compile_options(${target} PRIVATE -Werror)
        endif ()
    endif ()
endfunction()

function(hinape_apply_release_opts target)
    if (MSVC)
        target_compile_options(${target} PRIVATE $<$<CONFIG:Release>:/O2 /Ot /Oi /fp:fast>)
    else ()
        target_compile_options(${target} PRIVATE $<$<CONFIG:Release>:-O3 -ffast-math -fomit-frame-pointer>)
    endif ()
endfunction()

set(CMAKE_CXX_STANDARD 23)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)
set(CMAKE_POSITION_INDEPENDENT_CODE ON)

file(GLOB_RECURSE hpe_src engine/*.h engine/*.cpp)

add_executable(HinaPE main.cpp ${hpe_src})
target_include_directories(HinaPE PRIVATE ${CMAKE_CURRENT_SOURCE_DIR})
hinape_apply_common_warnings(HinaPE)
hinape_apply_release_opts(HinaPE)

if (HINAPE_WITH_TBB)
    include(cmake/setup_tbb.cmake)
    use_tbb(HinaPE)
    target_compile_definitions(HinaPE PUBLIC HINAPE_HAVE_TBB=1)
endif ()

if (HINAPE_WITH_AVX2)
    set(HINA_HAVE_AVX2 FALSE)
    if (MSVC)
        check_cxx_compiler_flag("/arch:AVX2" HINA_MSVC_HAS_AVX2)
        if (HINA_MSVC_HAS_AVX2)
            target_compile_options(HinaPE PRIVATE $<$<CONFIG:Release>:/arch:AVX2>)
            set(HINA_HAVE_AVX2 TRUE)
        endif ()
    else ()
        check_cxx_compiler_flag("-mavx2" HINA_GCC_HAS_MAVX2)
        check_cxx_compiler_flag("-mfma" HINA_GCC_HAS_MFMA)
        set(_AVX_FLAGS)
        if (HINA_GCC_HAS_MAVX2)
            list(APPEND _AVX_FLAGS -mavx2)
        endif ()
        if (HINA_GCC_HAS_MFMA)
            list(APPEND _AVX_FLAGS -mfma)
        endif ()
        if (_AVX_FLAGS)
            target_compile_options(HinaPE PRIVATE $<$<CONFIG:Release>:${_AVX_FLAGS}>)
            set(HINA_HAVE_AVX2 TRUE)
        endif ()
    endif ()
    if (HINA_HAVE_AVX2)
        target_compile_definitions(HinaPE PUBLIC HINAPE_HAVE_AVX2=1)
    endif ()
endif ()